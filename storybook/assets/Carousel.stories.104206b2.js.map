{"version":3,"file":"Carousel.stories.104206b2.js","sources":["../../../src/presentation/components/Carousel/Carousel.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport { CircleTriangleButton } from '../CircleTriangleButton/CircleTriangleButton';\n\nexport type CarouselOptions = {\n  /** autoplay milliseconds. default: no autoplay */\n  autoplay?: number;\n};\n\nexport type CarouselProps = CarouselOptions & {\n  className?: string;\n  carouselKey: string;\n  children: React.ReactNode;\n};\n\nconst createSlideId = (carouselKey: string, index: number) =>\n  `${carouselKey}_${index}`;\n\nconst slideId2SlideIndex = (slideId: string): number =>\n  +slideId.slice(slideId.lastIndexOf('_') + 1);\n\nexport function Carousel({\n  className,\n  carouselKey,\n  autoplay,\n  children,\n}: CarouselProps) {\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);\n  const sliderRef = useRef<HTMLOListElement | null>(null);\n\n  const scrollToSlide = useCallback(\n    (index: number) => {\n      const sliderElement = sliderRef.current;\n      if (!sliderElement) {\n        return;\n      }\n\n      const id = createSlideId(carouselKey, index);\n      const targetElement: HTMLElement | null = sliderElement.querySelector(\n        `#${id}`,\n      );\n      if (!targetElement) {\n        return;\n      }\n\n      const scrollX = sliderElement.scrollLeft;\n      const sliderPosition = sliderElement.getBoundingClientRect().left;\n      const targetPosition = targetElement.getBoundingClientRect().left;\n\n      sliderElement.scrollTo({\n        left: scrollX + targetPosition - sliderPosition,\n      });\n    },\n    [carouselKey],\n  );\n\n  const slides = useMemo(\n    () =>\n      React.Children.toArray(children).map((child, i) => ({\n        child,\n        slideId: createSlideId(carouselKey, i),\n      })),\n    [carouselKey, children],\n  );\n\n  const scrollToPreviousSlide = useCallback(() => {\n    const targetIndex =\n      currentSlideIndex === 0 ? slides.length - 1 : currentSlideIndex - 1;\n    scrollToSlide(targetIndex);\n  }, [currentSlideIndex, scrollToSlide, slides.length]);\n\n  const scrollToNextSlide = useCallback(() => {\n    const targetIndex =\n      currentSlideIndex === slides.length - 1 ? 0 : currentSlideIndex + 1;\n    scrollToSlide(targetIndex);\n  }, [currentSlideIndex, scrollToSlide, slides.length]);\n\n  useEffect(() => {\n    if (!sliderRef.current) {\n      return;\n    }\n\n    const callback: IntersectionObserverCallback = (entries) => {\n      entries.forEach((entry) => {\n        if (!entry.isIntersecting) {\n          return;\n        }\n        setCurrentSlideIndex(slideId2SlideIndex(entry.target.id));\n      });\n    };\n\n    const observer = new IntersectionObserver(callback, {\n      root: sliderRef.current,\n      threshold: 1,\n    });\n\n    const elements = slides\n      .map(({ slideId }) => document.querySelector(`#${slideId}`))\n      .filter((v): v is NonNullable<typeof v> => !!v);\n\n    elements.forEach((elm) => {\n      observer.observe(elm);\n    });\n\n    return () => {\n      elements.forEach((elm) => {\n        observer.unobserve(elm);\n      });\n    };\n  }, [slides]);\n\n  const [isHover, setIsHover] = useState(false);\n\n  useEffect(() => {\n    if (!autoplay) {\n      return;\n    }\n\n    if (isHover) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      scrollToNextSlide();\n    }, autoplay);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [autoplay, isHover, scrollToNextSlide]);\n\n  return (\n    <Root\n      className={className}\n      onMouseEnter={() => {\n        setIsHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsHover(false);\n      }}\n    >\n      <Slider ref={sliderRef}>\n        {slides.map(({ slideId, child }) => (\n          <Slide key={slideId} id={slideId}>\n            {child}\n            <Snapper />\n          </Slide>\n        ))}\n      </Slider>\n      <PreviewButton onClick={scrollToPreviousSlide}>\n        Go to previous slide\n      </PreviewButton>\n      <NextButton onClick={scrollToNextSlide}>Go to next slide</NextButton>\n      <Indicator>\n        <IndicatorList>\n          {slides.map(({ slideId }, i) => (\n            <IndicatorItem key={slideId}>\n              <IndicatorButton\n                isActive={currentSlideIndex === i}\n                onClick={() => {\n                  scrollToSlide(i);\n                }}\n              >\n                Go to {i + 1} slide\n              </IndicatorButton>\n            </IndicatorItem>\n          ))}\n        </IndicatorList>\n      </Indicator>\n    </Root>\n  );\n}\n\nconst Snapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  scroll-snap-align: center;\n`;\n\nconst Slide = styled.li`\n  position: relative;\n  flex: 0 0 100%;\n  width: 100%;\n`;\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n`;\n\nconst Slider = styled.ol`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  overflow-x: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n`;\n\nconst Indicator = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n  transform: translateY(-24px);\n`;\nconst IndicatorList = styled.ol`\n  display: inline-block;\n`;\nconst IndicatorItem = styled.li`\n  display: inline-block;\n`;\nconst IndicatorButton = styled.button<{ isActive?: boolean }>`\n  display: inline-block;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  background-color: ${({ isActive }) => (isActive ? '#ffe' : '#333')};\n  border-radius: 50%;\n  border: none;\n  margin: 0 4px;\n  font-size: 0;\n  transition: transform 0.1s;\n`;\n\nconst PreviewButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%);\n  position: absolute;\n  top: 50%;\n  left: 8px;\n`;\nconst NextButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%) rotate(180deg);\n  position: absolute;\n  top: 50%;\n  right: 8px;\n`;\n"],"names":["createSlideId","__name","carouselKey","index","slideId2SlideIndex","slideId","Carousel","className","autoplay","currentSlideIndex","setCurrentSlideIndex","useState","sliderRef","useRef","scrollToSlide","useCallback","sliderElement","id","targetElement","scrollX","sliderPosition","targetPosition","slides","useMemo","React","children","child","i","scrollToPreviousSlide","targetIndex","scrollToNextSlide","useEffect","callback","entries","entry","observer","current","elements","isHover","setIsHover","timer","clearInterval","_jsxs","Root","_jsx","Slider","PreviewButton","NextButton","Indicator","IndicatorList","IndicatorButton","Snapper","styled","Slide","IndicatorItem","button","isActive","CircleTriangleButton"],"mappings":"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"}