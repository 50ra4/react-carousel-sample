{"version":3,"file":"Carousel.stories.71d28c7b.js","sources":["../../../src/presentation/components/Carousel/Carousel.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport { CircleTriangleButton } from '../CircleTriangleButton/CircleTriangleButton';\n\nexport type CarouselOptions = {\n  /** autoplay milliseconds. default: no autoplay */\n  autoplay?: number;\n};\n\nexport type CarouselProps = CarouselOptions & {\n  className?: string;\n  carouselKey: string;\n  children: React.ReactNode;\n};\n\nconst createSlideId = (carouselKey: string, index: number) =>\n  `${carouselKey}_${index}`;\n\nconst getNextSlideIndex = (length: number, currentIndex: number) =>\n  currentIndex === length - 1 ? 0 : currentIndex + 1;\n\nconst getPrevSlideIndex = (length: number, currentIndex: number) =>\n  currentIndex === 0 ? length - 1 : currentIndex - 1;\n\nexport function Carousel({\n  className,\n  carouselKey,\n  autoplay,\n  children,\n}: CarouselProps) {\n  const sliderRef = useRef<HTMLOListElement | null>(null);\n\n  const scrollToSlide = useCallback((id: string) => {\n    const sliderElement = sliderRef.current;\n    if (!sliderElement) {\n      return;\n    }\n\n    const targetElement: HTMLElement | null = sliderElement.querySelector(\n      `#${id}`,\n    );\n    if (!targetElement) {\n      return;\n    }\n\n    const scrollX = sliderElement.scrollLeft;\n    const sliderPosition = sliderElement.getBoundingClientRect().left;\n    const targetPosition = targetElement.getBoundingClientRect().left;\n\n    sliderElement.scrollTo({\n      left: scrollX + targetPosition - sliderPosition,\n    });\n  }, []);\n\n  const slides = useMemo(\n    () =>\n      React.Children.toArray(children).map((child, i) => ({\n        child,\n        slideId: createSlideId(carouselKey, i),\n      })),\n    [carouselKey, children],\n  );\n\n  const [currentSlideId, setCurrentSlideId] = useState(slides[0].slideId);\n\n  useEffect(() => {\n    if (!sliderRef.current) {\n      return;\n    }\n\n    const callback: IntersectionObserverCallback = (entries) => {\n      entries.forEach((entry) => {\n        if (!entry.isIntersecting) {\n          return;\n        }\n        setCurrentSlideId(entry.target.id);\n      });\n    };\n\n    const observer = new IntersectionObserver(callback, {\n      root: sliderRef.current,\n      threshold: 1,\n    });\n\n    const elements = slides\n      .map(({ slideId }) => document.querySelector(`#${slideId}`))\n      .filter((v): v is NonNullable<typeof v> => !!v);\n\n    elements.forEach((elm) => {\n      observer.observe(elm);\n    });\n\n    return () => {\n      elements.forEach((elm) => {\n        observer.unobserve(elm);\n      });\n    };\n  }, [carouselKey, slides]);\n\n  const [isHover, setIsHover] = useState(false);\n\n  useEffect(() => {\n    if (!autoplay) {\n      return;\n    }\n\n    if (isHover) {\n      return;\n    }\n\n    const currentSlideIndex = slides.findIndex(\n      (slide) => slide.slideId === currentSlideId,\n    );\n    if (currentSlideIndex < 0) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      const nextSlideId = createSlideId(\n        carouselKey,\n        getNextSlideIndex(slides.length, currentSlideIndex),\n      );\n\n      scrollToSlide(nextSlideId);\n    }, autoplay);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [autoplay, carouselKey, currentSlideId, isHover, scrollToSlide, slides]);\n\n  return (\n    <Root\n      className={className}\n      onMouseEnter={() => {\n        setIsHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsHover(false);\n      }}\n    >\n      <Slider ref={sliderRef}>\n        {slides.map(({ slideId, child }, i) => (\n          <Slide key={slideId} id={slideId}>\n            {child}\n            <Snapper />\n            <PreviewButton\n              onClick={() => {\n                const targetId = createSlideId(\n                  carouselKey,\n                  getPrevSlideIndex(slides.length, i),\n                );\n                scrollToSlide(targetId);\n              }}\n            >\n              Go to previous slide\n            </PreviewButton>\n            <NextButton\n              onClick={() => {\n                const targetId = createSlideId(\n                  carouselKey,\n                  getNextSlideIndex(slides.length, i),\n                );\n                scrollToSlide(targetId);\n              }}\n            >\n              Go to next slide\n            </NextButton>\n          </Slide>\n        ))}\n      </Slider>\n      <Indicator>\n        <IndicatorList className={className}>\n          {slides.map(({ slideId }, i) => (\n            <IndicatorItem key={slideId}>\n              <IndicatorButton\n                isActive={currentSlideId === slideId}\n                onClick={() => {\n                  scrollToSlide(slideId);\n                }}\n              >\n                Go to {i + 1} slide\n              </IndicatorButton>\n            </IndicatorItem>\n          ))}\n        </IndicatorList>\n      </Indicator>\n    </Root>\n  );\n}\n\nconst Snapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  scroll-snap-align: center;\n`;\n\nconst Slide = styled.li`\n  position: relative;\n  flex: 0 0 100%;\n  width: 100%;\n`;\n\nconst Root = styled.div`\n  position: relative;\n  padding-top: 75%;\n  filter: drop-shadow(0 0 10px #0003);\n  perspective: 100px;\n`;\n\nconst Slider = styled.ol`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  overflow-x: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n`;\n\nconst Indicator = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n`;\nconst IndicatorList = styled.ol`\n  display: inline-block;\n`;\nconst IndicatorItem = styled.li`\n  display: inline-block;\n`;\nconst IndicatorButton = styled.button<{ isActive?: boolean }>`\n  display: inline-block;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  background-color: ${({ isActive }) => (isActive ? '#ffe' : '#333')};\n  border-radius: 50%;\n  border: none;\n  margin: 0 4px 24px;\n  font-size: 0;\n  transition: transform 0.1s;\n`;\n\nconst PreviewButton = styled(CircleTriangleButton)`\n  margin-top: 37.5%;\n  transform: translateY(-50%);\n  position: absolute;\n  top: 0;\n  left: 8px;\n`;\nconst NextButton = styled(CircleTriangleButton)`\n  margin-top: 37.5%;\n  transform: translateY(-50%) rotate(180deg);\n  position: absolute;\n  top: 0;\n  right: 8px;\n`;\n"],"names":["createSlideId","__name","carouselKey","index","getNextSlideIndex","length","currentIndex","getPrevSlideIndex","Carousel","className","autoplay","sliderRef","useRef","scrollToSlide","useCallback","id","sliderElement","targetElement","scrollX","sliderPosition","targetPosition","slides","useMemo","React","children","child","i","currentSlideId","setCurrentSlideId","useState","useEffect","callback","entries","entry","observer","current","elements","slideId","isHover","setIsHover","currentSlideIndex","slide","timer","nextSlideId","clearInterval","_jsxs","Root","_jsx","Slider","targetId","NextButton","Indicator","IndicatorList","IndicatorButton","Snapper","styled","Slide","IndicatorItem","button","isActive","PreviewButton","CircleTriangleButton"],"mappings":"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"}