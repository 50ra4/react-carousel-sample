{"version":3,"file":"Carousel.stories.566b8b5e.js","sources":["../../../src/hooks/useContentWidth.ts","../../../src/presentation/components/Carousel/Carousel.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nexport function useContentWidth<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T | null>,\n) {\n  const [width, setWidth] = useState<number | null>(null);\n  const perviousWidth = useRef(0);\n\n  const updatedWidth = useCallback((width: number) => {\n    if (width === perviousWidth.current) {\n      return;\n    }\n    // TODO: add throttle\n    console.log(`current width: ${width}px`);\n    setWidth(width);\n    perviousWidth.current = width;\n  }, []);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const callback: ResizeObserverCallback = (entries) => {\n      entries.forEach((entry) => {\n        updatedWidth(entry.contentRect.width);\n      });\n    };\n\n    const element = ref.current;\n    const observer = new ResizeObserver(callback);\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [ref, updatedWidth]);\n\n  return width;\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport { CircleTriangleButton } from '../CircleTriangleButton/CircleTriangleButton';\nimport { useContentWidth } from 'src/hooks/useContentWidth';\n\nexport type CarouselOptions = {\n  /** autoplay milliseconds. default: no autoplay */\n  autoplay?: number;\n  /** a number of slides visible on the slider. default: 1 */\n  perView?: number;\n  /** add margin between slides. But 0 when perView is 1. default: 0 */\n  gap?: number;\n};\n\nexport type CarouselProps = CarouselOptions & {\n  className?: string;\n  carouselKey: string;\n  children: React.ReactNode;\n};\n\nconst createSlideId = (carouselKey: string, index: number) =>\n  `${carouselKey}_${index}`;\n\nconst slideId2SlideIndex = (slideId: string): number =>\n  +slideId.slice(slideId.lastIndexOf('_') + 1);\n\nfunction useCurrentSlideIndex<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T | null>,\n  { total, carouselKey }: { total: number; carouselKey: string },\n) {\n  const [visibleIndexes, setVisibleIndexes] = useState<Set<number>>(new Set());\n  const currentSlideIndex = Math.min(...Array.from(visibleIndexes));\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const callback: IntersectionObserverCallback = (entries) => {\n      setVisibleIndexes((prev) => {\n        // TODO: check changes from last time and then update\n        const updated = new Set(prev);\n\n        entries.forEach((entry) => {\n          const index = slideId2SlideIndex(entry.target.id);\n          if (entry.intersectionRatio > 0.9) {\n            updated.add(index);\n          } else {\n            updated.delete(index);\n          }\n        });\n\n        return updated;\n      });\n    };\n\n    const observer = new IntersectionObserver(callback, {\n      root: ref.current,\n      threshold: [0, 0.9, 1],\n    });\n\n    const elements = Array.from({ length: total })\n      .map((_, i) =>\n        document.querySelector(`#${createSlideId(carouselKey, i)}`),\n      )\n      .filter((v): v is NonNullable<typeof v> => !!v);\n\n    elements.forEach((elm) => {\n      observer.observe(elm);\n    });\n\n    return () => {\n      elements.forEach((elm) => {\n        observer.unobserve(elm);\n      });\n    };\n  }, [carouselKey, total, ref]);\n\n  return currentSlideIndex;\n}\n\nexport function Carousel({\n  className,\n  carouselKey,\n  autoplay,\n  perView,\n  gap = 0,\n  children,\n}: CarouselProps) {\n  const sliderRef = useRef<HTMLOListElement | null>(null);\n  const sliderWidth = useContentWidth(sliderRef);\n  const [{ slideWidth, sliderPaddingRight, gapWidth }, setSliderOption] =\n    useState<{\n      slideWidth: number | null;\n      sliderPaddingRight: number;\n      gapWidth: number;\n    }>({\n      slideWidth: null,\n      sliderPaddingRight: 0,\n      gapWidth: 0,\n    });\n  const [isHover, setIsHover] = useState(false);\n\n  const scrollToSlide = useCallback(\n    (index: number) => {\n      const sliderElement = sliderRef.current;\n      if (!sliderElement) {\n        return;\n      }\n\n      const id = createSlideId(carouselKey, index);\n      const targetElement: HTMLElement | null = sliderElement.querySelector(\n        `#${id}`,\n      );\n      if (!targetElement) {\n        return;\n      }\n\n      const scrollX = sliderElement.scrollLeft;\n      const sliderPosition = sliderElement.getBoundingClientRect().left;\n      const targetPosition = targetElement.getBoundingClientRect().left;\n\n      sliderElement.scrollTo({\n        left: scrollX + targetPosition - sliderPosition,\n      });\n    },\n    [carouselKey],\n  );\n\n  const slides = useMemo(\n    () =>\n      React.Children.toArray(children).map((child, i) => ({\n        child,\n        slideId: createSlideId(carouselKey, i),\n      })),\n    [carouselKey, children],\n  );\n\n  const currentSlideIndex = useCurrentSlideIndex(sliderRef, {\n    carouselKey,\n    total: slides.length,\n  });\n\n  const scrollToPreviousSlide = useCallback(() => {\n    const targetIndex =\n      currentSlideIndex === 0 ? slides.length - 1 : currentSlideIndex - 1;\n    scrollToSlide(targetIndex);\n  }, [currentSlideIndex, scrollToSlide, slides.length]);\n\n  const scrollToNextSlide = useCallback(() => {\n    const targetIndex =\n      currentSlideIndex === slides.length - 1 ? 0 : currentSlideIndex + 1;\n    scrollToSlide(targetIndex);\n  }, [currentSlideIndex, scrollToSlide, slides.length]);\n\n  useEffect(() => {\n    if (!autoplay) {\n      return;\n    }\n\n    if (isHover) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      scrollToNextSlide();\n    }, autoplay);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [autoplay, isHover, scrollToNextSlide]);\n\n  useEffect(() => {\n    if (!perView) {\n      return;\n    }\n    if (perView < 1) {\n      throw new Error('perView must be 1 or more.');\n    }\n    if (!sliderWidth) {\n      return;\n    }\n\n    const gapTotal = perView > 1 ? (perView - 1) * (gap ?? 0) : 0;\n    const perWidth = (sliderWidth - gapTotal) / perView;\n\n    setSliderOption({\n      slideWidth: perWidth,\n      sliderPaddingRight: (perView - 1) * sliderWidth,\n      gapWidth: perView > 1 ? gap : 0,\n    });\n  }, [gap, perView, sliderWidth]);\n\n  return (\n    <Root\n      className={className}\n      onMouseEnter={() => {\n        setIsHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsHover(false);\n      }}\n    >\n      <Slider ref={sliderRef} gapWidth={gapWidth}>\n        {slides.map(({ slideId, child }) => (\n          <Slide key={slideId} id={slideId} width={slideWidth ?? undefined}>\n            {child}\n            <Snapper multipleSlide={!!perView && perView > 1} />\n          </Slide>\n        ))}\n        {!!sliderPaddingRight && (\n          <SliderPadding inserted={sliderPaddingRight} />\n        )}\n      </Slider>\n      <PreviewButton onClick={scrollToPreviousSlide}>\n        Go to previous slide\n      </PreviewButton>\n      <NextButton onClick={scrollToNextSlide}>Go to next slide</NextButton>\n      <Indicator>\n        <IndicatorList>\n          {slides.map(({ slideId }, i) => (\n            <IndicatorItem key={slideId}>\n              <IndicatorButton\n                isActive={currentSlideIndex === i}\n                onClick={() => {\n                  scrollToSlide(i);\n                }}\n              >\n                Go to {i + 1} slide\n              </IndicatorButton>\n            </IndicatorItem>\n          ))}\n        </IndicatorList>\n      </Indicator>\n    </Root>\n  );\n}\n\nconst SliderPadding = styled.div<{ inserted: number }>`\n  padding-left: ${({ inserted }) => inserted}px;\n`;\n\nconst Snapper = styled.div<{ multipleSlide?: boolean }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  scroll-snap-align: ${({ multipleSlide }) =>\n    multipleSlide ? 'start' : 'center'};\n`;\n\nconst Slide = styled.li<{ width?: number }>`\n  position: relative;\n  flex: 0 0 auto;\n  width: ${({ width }) => (width ? `${width}px` : '100%')};\n`;\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n`;\n\nconst Slider = styled.ol<{ gapWidth: number }>`\n  height: 100%;\n  display: flex;\n  overflow-x: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n\n  & > ${Slide} + ${Slide} {\n    margin-left: ${({ gapWidth }) => (gapWidth ? gapWidth : 0)}px;\n  }\n`;\n\nconst Indicator = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n  transform: translateY(-24px);\n`;\nconst IndicatorList = styled.ol`\n  display: inline-block;\n`;\nconst IndicatorItem = styled.li`\n  display: inline-block;\n`;\nconst IndicatorButton = styled.button<{ isActive?: boolean }>`\n  display: inline-block;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  background-color: ${({ isActive }) => (isActive ? '#ffe' : '#333')};\n  border-radius: 50%;\n  border: none;\n  margin: 0 4px;\n  font-size: 0;\n  transition: transform 0.1s;\n`;\n\nconst PreviewButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%);\n  position: absolute;\n  top: 50%;\n  left: 8px;\n`;\nconst NextButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%) rotate(180deg);\n  position: absolute;\n  top: 50%;\n  right: 8px;\n`;\n"],"names":["useContentWidth","ref","width","setWidth","useState","perviousWidth","useRef","updatedWidth","useCallback","useEffect","callback","__name","entries","entry","element","observer","createSlideId","carouselKey","index","slideId2SlideIndex","slideId","useCurrentSlideIndex","total","visibleIndexes","setVisibleIndexes","currentSlideIndex","updated","prev","current","elements","Carousel","className","autoplay","perView","children","sliderRef","sliderWidth","slideWidth","sliderPaddingRight","gapWidth","isHover","setIsHover","scrollToSlide","sliderElement","id","targetElement","scrollX","sliderPosition","targetPosition","slides","useMemo","React","child","i","length","scrollToPreviousSlide","targetIndex","scrollToNextSlide","timer","clearInterval","gapTotal","gap","perWidth","setSliderOption","_jsxs","Root","Slider","undefined","_jsx","SliderPadding","PreviewButton","NextButton","Indicator","IndicatorList","IndicatorButton","styled","div","inserted","Snapper","multipleSlide","Slide","li","ol","IndicatorItem","button","isActive","CircleTriangleButton"],"mappings":"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"}