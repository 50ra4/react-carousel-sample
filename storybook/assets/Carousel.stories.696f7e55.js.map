{"version":3,"file":"Carousel.stories.696f7e55.js","sources":["../../../src/hooks/useResizeObserver.ts","../../../src/utils/function.ts","../../../src/hooks/useContentWidth.ts","../../../src/presentation/components/Carousel/Carousel.tsx"],"sourcesContent":["import { useEffect } from 'react';\n\nexport type ResizeObserverEntryObject = {\n  borderBoxSize: ResizeObserverSize | null;\n  contentBoxSize: ResizeObserverSize | null;\n  contentRect: DOMRectReadOnly | null;\n  devicePixelContentBoxSize: ResizeObserverSize | null;\n  target: HTMLElement;\n};\n\nconst toResizeObserverSize = (\n  size: Readonly<ResizeObserverSize[]> | ResizeObserverSize,\n): ResizeObserverSize | null => {\n  const [head] = size instanceof ResizeObserverSize ? [size] : size;\n  return !head ? null : head;\n};\n\nexport function useResizeObserver<T extends HTMLElement = HTMLElement>({\n  ref,\n  callback,\n}: {\n  ref: React.RefObject<T | null>;\n  callback: (value: ResizeObserverEntryObject) => void;\n}) {\n  useEffect(() => {\n    const target = ref.current;\n    if (!target) {\n      return;\n    }\n\n    const callbackFn: ResizeObserverCallback = (entries) => {\n      const entry = entries.find((entry) => entry.target === target);\n      if (!entry) {\n        return;\n      }\n\n      callback({\n        borderBoxSize: toResizeObserverSize(entry.borderBoxSize),\n        contentBoxSize: toResizeObserverSize(entry.contentBoxSize),\n        contentRect: entry.contentRect,\n        devicePixelContentBoxSize: toResizeObserverSize(\n          entry.devicePixelContentBoxSize,\n        ),\n        target,\n      });\n    };\n\n    const element = ref.current;\n    const observer = new ResizeObserver(callbackFn);\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [callback, ref]);\n}\n","// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Func = (...args: any[]) => any;\n\nexport function throttle<Fn extends Func>(fn: Fn, interval: number) {\n  let lastUpdatedAt = -1;\n\n  return (...params: Parameters<Fn>) => {\n    const nextUpdatedAt = lastUpdatedAt + interval;\n    const currentAt = +new Date();\n\n    if (currentAt < nextUpdatedAt) {\n      return;\n    }\n\n    lastUpdatedAt = currentAt;\n    fn(...params);\n  };\n}\n\nexport function debounce<Fn extends Func>(fn: Fn, interval: number) {\n  let timer: number | undefined;\n\n  return (...params: Parameters<Fn>) => {\n    clearTimeout(timer);\n    timer = window.setTimeout(() => {\n      fn(...params);\n    }, interval);\n  };\n}\n\nexport function audit<Fn extends Func>(fn: Fn, interval: number) {\n  let timer: number | undefined;\n  let firstCalledAt: number | undefined = undefined;\n\n  return (...params: Parameters<Fn>) => {\n    clearTimeout(timer);\n\n    const current = +new Date();\n    if (!firstCalledAt) {\n      firstCalledAt = current;\n    }\n    const rest = interval - (current - firstCalledAt);\n\n    timer = window.setTimeout(() => {\n      fn(...params);\n      firstCalledAt = undefined;\n    }, rest);\n  };\n}\n","import React, { useMemo, useRef, useState } from 'react';\nimport {\n  ResizeObserverEntryObject,\n  useResizeObserver,\n} from './useResizeObserver';\nimport { audit } from 'src/utils/function';\n\ntype Options = {\n  duration?: number;\n};\n\nconst toWidth = ({ borderBoxSize, contentRect }: ResizeObserverEntryObject) =>\n  borderBoxSize?.inlineSize ?? contentRect?.width ?? null;\n\nexport function useContentWidth<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T | null>,\n  { duration = 250 }: Options = {},\n) {\n  const [width, setWidth] = useState<number | null>(null);\n  const previousWidth = useRef(0);\n\n  const callback = useMemo(\n    () =>\n      audit((entry: ResizeObserverEntryObject) => {\n        const width = toWidth(entry);\n        if (!width) {\n          return;\n        }\n        if (previousWidth.current === width) {\n          return;\n        }\n        previousWidth.current = width;\n        setWidth(width);\n      }, duration),\n    [duration],\n  );\n\n  useResizeObserver({ ref, callback });\n\n  return width;\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport { CircleTriangleButton } from '../CircleTriangleButton/CircleTriangleButton';\nimport { useContentWidth } from 'src/hooks/useContentWidth';\n\ntype Peek = { before: number; after: number };\ntype PeekOption = number | Partial<Peek>;\n\nconst persePeekOption = (peek?: PeekOption): Peek => {\n  switch (typeof peek) {\n    case 'object':\n      return {\n        before: peek.before ?? 0,\n        after: peek.after ?? 0,\n      };\n\n    case 'number':\n      return {\n        before: peek,\n        after: peek,\n      };\n\n    default:\n      return {\n        before: 0,\n        after: 0,\n      };\n  }\n};\n\nexport type CarouselOptions = {\n  /** autoplay milliseconds. default: no autoplay */\n  autoplay?: number;\n  /** a number of slides visible on the slider. default: 1 */\n  perView?: number;\n  /** add margin between slides. But 0 when perView is 1. default: 0 */\n  gap?: number;\n  /** The value of the future slider which have to be visible in the current view. default: 0 */\n  peek?: PeekOption;\n  /** Start at specific slide number. default: 0 */\n  startAt?: number;\n  /** allow looping. default: true */\n  rewind?: boolean;\n  /** stop running perView number of slides from the end */\n  bound?: boolean;\n  /** sets the width of the slide. However, it cannot be used together with the preview. */\n  slideWidth?: number;\n\n  /** hide Indicator. default: false */\n  disabledIndicator?: boolean;\n  /** hide PreviousButton. default: false */\n  disabledPreviousButton?: boolean;\n  /** hide NextButton. default: false */\n  disabledNextButton?: boolean;\n};\n\nexport type CarouselProps = CarouselOptions & {\n  className?: string;\n  carouselKey: string;\n  children: React.ReactNode;\n};\n\nconst createSlideId = (carouselKey: string, index: number) =>\n  `${carouselKey}_${index}`;\n\nconst slideId2SlideIndex = (slideId: string): number =>\n  +slideId.slice(slideId.lastIndexOf('_') + 1);\n\nconst isEqualSlideIndexes = (a: Set<number>, b: Set<number>): boolean =>\n  a.size === b.size && Array.from(a).every((v) => b.has(v));\n\nfunction useCurrentSlideIndex<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T | null>,\n  { total, carouselKey }: { total: number; carouselKey: string },\n) {\n  const [displayedIndexes, setDisplayedIndexes] = useState<Set<number>>(\n    new Set(),\n  );\n  const prevDisplayedIndexes = useRef(displayedIndexes);\n  const currentSlideIndex = Math.min(...Array.from(displayedIndexes));\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const callback: IntersectionObserverCallback = (entries) => {\n      const updated = new Set(prevDisplayedIndexes.current);\n      entries.forEach((entry) => {\n        const index = slideId2SlideIndex(entry.target.id);\n        if (entry.intersectionRatio > 0.9) {\n          updated.add(index);\n        } else {\n          updated.delete(index);\n        }\n      });\n\n      if (isEqualSlideIndexes(updated, prevDisplayedIndexes.current)) {\n        return;\n      }\n\n      setDisplayedIndexes(updated);\n      prevDisplayedIndexes.current = updated;\n    };\n\n    const observer = new IntersectionObserver(callback, {\n      root: ref.current,\n      threshold: [0, 0.9, 1],\n    });\n\n    const elements = Array.from({ length: total })\n      .map((_, i) =>\n        document.querySelector(`#${createSlideId(carouselKey, i)}`),\n      )\n      .filter((v): v is NonNullable<typeof v> => !!v);\n\n    elements.forEach((elm) => {\n      observer.observe(elm);\n    });\n\n    return () => {\n      elements.forEach((elm) => {\n        observer.unobserve(elm);\n      });\n    };\n  }, [carouselKey, total, ref]);\n\n  return {\n    currentSlideIndex,\n    isDisplayedLastSlide: displayedIndexes.has(total - 1),\n  };\n}\n\nexport function Carousel({\n  className,\n  carouselKey,\n  autoplay,\n  perView,\n  gap = 0,\n  peek: peekOption,\n  startAt,\n  rewind = true,\n  bound,\n  slideWidth: slideWidthOption,\n  disabledIndicator,\n  disabledPreviousButton,\n  disabledNextButton,\n  children,\n}: CarouselProps) {\n  const peek = useMemo(() => persePeekOption(peekOption), [peekOption]);\n  const sliderRef = useRef<HTMLOListElement | null>(null);\n  const sliderWidth = useContentWidth(sliderRef);\n\n  const [isHover, setIsHover] = useState(false);\n\n  const scrollToSlide = useCallback(\n    (index: number) => {\n      const sliderElement = sliderRef.current;\n      if (!sliderElement) {\n        return;\n      }\n\n      const id = createSlideId(carouselKey, index);\n      const targetElement: HTMLElement | null = sliderElement.querySelector(\n        `#${id}`,\n      );\n      if (!targetElement) {\n        return;\n      }\n\n      const scrollX = sliderElement.scrollLeft;\n      const sliderPosition = sliderElement.getBoundingClientRect().left;\n      const targetPosition = targetElement.getBoundingClientRect().left;\n\n      sliderElement.scrollTo({\n        left: scrollX + targetPosition - sliderPosition,\n      });\n    },\n    [carouselKey],\n  );\n\n  const slides = useMemo(\n    () =>\n      React.Children.toArray(children).map((child, i) => ({\n        child,\n        slideId: createSlideId(carouselKey, i),\n      })),\n    [carouselKey, children],\n  );\n\n  const { currentSlideIndex, isDisplayedLastSlide } = useCurrentSlideIndex(\n    sliderRef,\n    {\n      carouselKey,\n      total: slides.length,\n    },\n  );\n\n  const isCurrentSlideFirst = currentSlideIndex === 0;\n  const canScrollToPrevious = rewind || !isCurrentSlideFirst;\n  const previousSlideIndex = isCurrentSlideFirst\n    ? slides.length - 1\n    : currentSlideIndex - 1;\n\n  const isCurrentSlideLast = currentSlideIndex === slides.length - 1;\n  const shouldScrollToFirst =\n    isCurrentSlideLast || (!!bound && isDisplayedLastSlide);\n  const canScrollToNext = rewind || !shouldScrollToFirst;\n  const nextSlideIndex = shouldScrollToFirst ? 0 : currentSlideIndex + 1;\n\n  const scrollToPrevious = useCallback(() => {\n    scrollToSlide(previousSlideIndex);\n  }, [previousSlideIndex, scrollToSlide]);\n\n  const scrollToNext = useCallback(() => {\n    scrollToSlide(nextSlideIndex);\n  }, [nextSlideIndex, scrollToSlide]);\n\n  useEffect(() => {\n    if (!autoplay) {\n      return;\n    }\n\n    if (isHover) {\n      return;\n    }\n\n    if (!canScrollToNext) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      scrollToNext();\n    }, autoplay);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [autoplay, canScrollToNext, isHover, scrollToNext]);\n\n  useEffect(() => {\n    if (perView && perView < 1) {\n      throw new Error('perView must be 1 or more.');\n    }\n    if (perView && slideWidthOption) {\n      throw new Error('both perView and slideWidth cannot be set.');\n    }\n  }, [perView, slideWidthOption]);\n\n  const { slideWidth, sliderPaddingRight } = useMemo((): {\n    slideWidth?: number;\n    sliderPaddingRight: number;\n  } => {\n    const initial = {\n      sliderPaddingRight: 0,\n    };\n    if (!sliderWidth) {\n      return initial;\n    }\n\n    if (perView) {\n      const gapTotal = perView > 1 ? (perView - 1) * (gap ?? 0) : 0;\n      const perWidth = (sliderWidth - gapTotal) / perView;\n      return {\n        slideWidth: perWidth,\n        sliderPaddingRight: bound ? 0 : (perView - 1) * sliderWidth,\n      };\n    }\n\n    if (slideWidthOption) {\n      return {\n        slideWidth: slideWidthOption,\n        sliderPaddingRight: bound ? 0 : sliderWidth - slideWidthOption,\n      };\n    }\n\n    return initial;\n  }, [bound, gap, perView, slideWidthOption, sliderWidth]);\n\n  const gapWidth = !!perView && perView > 1 ? gap : 0;\n  const isMultipleSlide = sliderWidth !== slideWidth;\n\n  useEffect(() => {\n    if (!startAt) {\n      return;\n    }\n    scrollToSlide(startAt);\n  }, [scrollToSlide, startAt]);\n\n  return (\n    <Root\n      className={className}\n      onMouseEnter={() => {\n        setIsHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsHover(false);\n      }}\n    >\n      <Slider ref={sliderRef} gapWidth={gapWidth} peek={peek}>\n        {slides.map(({ slideId, child }) => (\n          <Slide key={slideId} id={slideId} width={slideWidth}>\n            {child}\n            <Snapper isMultipleSlide={isMultipleSlide} />\n          </Slide>\n        ))}\n        <SliderPadding inserted={sliderPaddingRight || peek.after} />\n      </Slider>\n      {!disabledPreviousButton && canScrollToPrevious && (\n        <PreviewButton onClick={scrollToPrevious}>\n          Go to previous slide\n        </PreviewButton>\n      )}\n      {!disabledNextButton && canScrollToNext && (\n        <NextButton onClick={scrollToNext}>Go to next slide</NextButton>\n      )}\n      {!disabledIndicator && (\n        <Indicator>\n          <IndicatorList>\n            {slides.map(({ slideId }, i) => (\n              <IndicatorItem key={slideId}>\n                <IndicatorButton\n                  isActive={currentSlideIndex === i}\n                  onClick={() => {\n                    scrollToSlide(i);\n                  }}\n                >\n                  Go to {i + 1} slide\n                </IndicatorButton>\n              </IndicatorItem>\n            ))}\n          </IndicatorList>\n        </Indicator>\n      )}\n    </Root>\n  );\n}\n\nconst SliderPadding = styled.div<{ inserted: number }>`\n  padding-left: ${({ inserted }) => inserted}px;\n`;\n\nconst Snapper = styled.div<{ isMultipleSlide?: boolean }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  scroll-snap-align: ${({ isMultipleSlide }) =>\n    isMultipleSlide ? 'start' : 'center'};\n`;\n\nconst Slide = styled.li<{ width?: number }>`\n  position: relative;\n  flex: 0 0 auto;\n  width: ${({ width }) => (width ? `${width}px` : '100%')};\n`;\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n`;\n\ntype SliderProps = { peek: Peek; gapWidth: number };\n\nconst Slider = styled.ol<SliderProps>`\n  height: 100%;\n  display: flex;\n  overflow-x: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n\n  & > ${Slide} + ${Slide} {\n    margin-left: ${({ gapWidth }) => gapWidth ?? 0}px;\n  }\n\n  scroll-padding-left: ${({ peek: { before } }) => before}px;\n  scroll-padding-right: ${({ peek: { after } }) => after}px;\n  padding-left: ${({ peek: { before } }) => before}px;\n  padding-right: ${({ peek: { after } }) => after}px;\n`;\n\nconst Indicator = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n  transform: translateY(-24px);\n`;\nconst IndicatorList = styled.ol`\n  display: inline-block;\n`;\nconst IndicatorItem = styled.li`\n  display: inline-block;\n`;\nconst IndicatorButton = styled.button<{ isActive?: boolean }>`\n  display: inline-block;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  background-color: ${({ isActive }) => (isActive ? '#ffe' : '#333')};\n  border-radius: 50%;\n  border: none;\n  margin: 0 4px;\n  font-size: 0;\n  transition: transform 0.1s;\n  filter: drop-shadow(4px 4px 2px rgba(0, 0, 0, 0.2));\n`;\n\nconst PreviewButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%);\n  position: absolute;\n  top: 50%;\n  left: 8px;\n`;\nconst NextButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%) rotate(180deg);\n  position: absolute;\n  top: 50%;\n  right: 8px;\n`;\n"],"names":["toResizeObserverSize","__name","size","head","useResizeObserver","ref","callback","useEffect","target","callbackFn","entries","entry","element","observer","audit","fn","interval","timer","firstCalledAt","params","current","rest","toWidth","borderBoxSize","contentRect","_b","_a","useContentWidth","duration","width","setWidth","useState","previousWidth","useRef","useMemo","persePeekOption","peek","createSlideId","carouselKey","index","slideId2SlideIndex","slideId","isEqualSlideIndexes","a","b","v","useCurrentSlideIndex","total","displayedIndexes","setDisplayedIndexes","prevDisplayedIndexes","currentSlideIndex","updated","elements","Carousel","className","autoplay","perView","peekOption","startAt","bound","slideWidthOption","disabledIndicator","disabledPreviousButton","disabledNextButton","sliderRef","sliderWidth","isHover","setIsHover","scrollToSlide","useCallback","sliderElement","id","targetElement","scrollX","sliderPosition","targetPosition","slides","React","children","child","i","isDisplayedLastSlide","length","isCurrentSlideFirst","canScrollToPrevious","rewind","previousSlideIndex","shouldScrollToFirst","canScrollToNext","nextSlideIndex","scrollToPrevious","scrollToNext","clearInterval","slideWidth","sliderPaddingRight","initial","gapTotal","gap","perWidth","gapWidth","isMultipleSlide","_jsxs","Root","Slider","_jsx","SliderPadding","after","PreviewButton","NextButton","Indicator","IndicatorList","IndicatorButton","styled","div","inserted","Snapper","Slide","li","ol","before","IndicatorItem","button","isActive","CircleTriangleButton"],"mappings":"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"}