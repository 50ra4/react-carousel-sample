{"version":3,"file":"Carousel.stories.7dd9e035.js","sources":["../../../src/hooks/useContentWidth.ts","../../../src/presentation/components/Carousel/Carousel.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nexport function useContentWidth<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T | null>,\n) {\n  const [width, setWidth] = useState<number | null>(null);\n  const perviousWidth = useRef(0);\n\n  const updatedWidth = useCallback((width: number) => {\n    if (width === perviousWidth.current) {\n      return;\n    }\n    // TODO: add throttle\n    console.log(`current width: ${width}px`);\n    setWidth(width);\n    perviousWidth.current = width;\n  }, []);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const callback: ResizeObserverCallback = (entries) => {\n      entries.forEach((entry) => {\n        updatedWidth(entry.contentRect.width);\n      });\n    };\n\n    const element = ref.current;\n    const observer = new ResizeObserver(callback);\n    observer.observe(element);\n\n    return () => {\n      observer.unobserve(element);\n    };\n  }, [ref, updatedWidth]);\n\n  return width;\n}\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\nimport { CircleTriangleButton } from '../CircleTriangleButton/CircleTriangleButton';\nimport { useContentWidth } from 'src/hooks/useContentWidth';\n\ntype PeekObject = { before: number; after: number };\ntype Peek = number | Partial<PeekObject>;\n\nconst persePeek = (peek?: Peek): PeekObject => {\n  if (typeof peek === 'object') {\n    return {\n      before: peek.before ?? 0,\n      after: peek.after ?? 0,\n    };\n  }\n  if (typeof peek === 'number') {\n    return {\n      before: peek,\n      after: peek,\n    };\n  }\n  return {\n    before: 0,\n    after: 0,\n  };\n};\n\ntype SideNavigationObject = {\n  previous: boolean;\n  next: boolean;\n};\ntype SideNavigationOption = boolean | Partial<SideNavigationObject>;\n\nconst perseSideNavigationOption = (\n  option?: SideNavigationOption,\n): SideNavigationObject => {\n  if (typeof option === 'object') {\n    return {\n      previous: option.previous ?? false,\n      next: option.next ?? false,\n    };\n  }\n  if (typeof option === 'boolean') {\n    return {\n      previous: option,\n      next: option,\n    };\n  }\n  return {\n    previous: false,\n    next: false,\n  };\n};\n\nexport type CarouselOptions = {\n  /** autoplay milliseconds. default: no autoplay */\n  autoplay?: number;\n  /** a number of slides visible on the slider. default: 1 */\n  perView?: number;\n  /** add margin between slides. But 0 when perView is 1. default: 0 */\n  gap?: number;\n  /** The value of the future slider which have to be visible in the current view. default: 0 */\n  peek?: Peek;\n  /** Start at specific slide number. default: 0 */\n  startAt?: number;\n  /** allow looping. default: true */\n  rewind?: boolean;\n  /** stop running perView number of slides from the end */\n  bound?: boolean;\n\n  /** hide Indicator. default: false */\n  disabledIndicator?: boolean;\n  /** hide side navigation button. default: false */\n  disabledSideNavigation?: SideNavigationOption;\n};\n\nexport type CarouselProps = CarouselOptions & {\n  className?: string;\n  carouselKey: string;\n  children: React.ReactNode;\n};\n\nconst createSlideId = (carouselKey: string, index: number) =>\n  `${carouselKey}_${index}`;\n\nconst slideId2SlideIndex = (slideId: string): number =>\n  +slideId.slice(slideId.lastIndexOf('_') + 1);\n\nconst isEqualSlideIndexes = (a: Set<number>, b: Set<number>): boolean =>\n  a.size === b.size && Array.from(a).every((v) => b.has(v));\n\nfunction useCurrentSlideIndex<T extends HTMLElement = HTMLElement>(\n  ref: React.RefObject<T | null>,\n  { total, carouselKey }: { total: number; carouselKey: string },\n) {\n  const [displayedIndexes, setDisplayedIndexes] = useState<Set<number>>(\n    new Set(),\n  );\n  const prevDisplayedIndexes = useRef(displayedIndexes);\n  const currentSlideIndex = Math.min(...Array.from(displayedIndexes));\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const callback: IntersectionObserverCallback = (entries) => {\n      const updated = new Set(prevDisplayedIndexes.current);\n      entries.forEach((entry) => {\n        const index = slideId2SlideIndex(entry.target.id);\n        if (entry.intersectionRatio > 0.9) {\n          updated.add(index);\n        } else {\n          updated.delete(index);\n        }\n      });\n\n      if (isEqualSlideIndexes(updated, prevDisplayedIndexes.current)) {\n        return;\n      }\n\n      setDisplayedIndexes(updated);\n      prevDisplayedIndexes.current = updated;\n    };\n\n    const observer = new IntersectionObserver(callback, {\n      root: ref.current,\n      threshold: [0, 0.9, 1],\n    });\n\n    const elements = Array.from({ length: total })\n      .map((_, i) =>\n        document.querySelector(`#${createSlideId(carouselKey, i)}`),\n      )\n      .filter((v): v is NonNullable<typeof v> => !!v);\n\n    elements.forEach((elm) => {\n      observer.observe(elm);\n    });\n\n    return () => {\n      elements.forEach((elm) => {\n        observer.unobserve(elm);\n      });\n    };\n  }, [carouselKey, total, ref]);\n\n  return {\n    currentSlideIndex,\n    isDisplayedLastSlide: displayedIndexes.has(total - 1),\n  };\n}\n\nexport function Carousel({\n  className,\n  carouselKey,\n  autoplay,\n  perView,\n  gap = 0,\n  peek: peekOption,\n  startAt,\n  rewind = true,\n  bound,\n  disabledIndicator,\n  disabledSideNavigation: disabledSideNavigationOption,\n  children,\n}: CarouselProps) {\n  const peek = useMemo(() => persePeek(peekOption), [peekOption]);\n  const disabledSideNavigation = useMemo(\n    () => perseSideNavigationOption(disabledSideNavigationOption),\n    [disabledSideNavigationOption],\n  );\n\n  const sliderRef = useRef<HTMLOListElement | null>(null);\n  const sliderWidth = useContentWidth(sliderRef);\n  const [{ slideWidth, sliderPaddingRight, gapWidth }, setSliderOption] =\n    useState<{\n      slideWidth: number | null;\n      sliderPaddingRight: number;\n      gapWidth: number;\n    }>({\n      slideWidth: null,\n      sliderPaddingRight: 0,\n      gapWidth: 0,\n    });\n  const [isHover, setIsHover] = useState(false);\n\n  const scrollToSlide = useCallback(\n    (index: number) => {\n      const sliderElement = sliderRef.current;\n      if (!sliderElement) {\n        return;\n      }\n\n      const id = createSlideId(carouselKey, index);\n      const targetElement: HTMLElement | null = sliderElement.querySelector(\n        `#${id}`,\n      );\n      if (!targetElement) {\n        return;\n      }\n\n      const scrollX = sliderElement.scrollLeft;\n      const sliderPosition = sliderElement.getBoundingClientRect().left;\n      const targetPosition = targetElement.getBoundingClientRect().left;\n\n      sliderElement.scrollTo({\n        left: scrollX + targetPosition - sliderPosition,\n      });\n    },\n    [carouselKey],\n  );\n\n  const slides = useMemo(\n    () =>\n      React.Children.toArray(children).map((child, i) => ({\n        child,\n        slideId: createSlideId(carouselKey, i),\n      })),\n    [carouselKey, children],\n  );\n\n  const { currentSlideIndex, isDisplayedLastSlide } = useCurrentSlideIndex(\n    sliderRef,\n    {\n      carouselKey,\n      total: slides.length,\n    },\n  );\n\n  const isCurrentSlideFirst = currentSlideIndex === 0;\n  const canScrollToPrevious = rewind || !isCurrentSlideFirst;\n  const previousSlideIndex = isCurrentSlideFirst\n    ? slides.length - 1\n    : currentSlideIndex - 1;\n\n  const isCurrentSlideLast = currentSlideIndex === slides.length - 1;\n  const shouldScrollToFirst =\n    isCurrentSlideLast || (!!bound && isDisplayedLastSlide);\n  const canScrollToNext = rewind || !shouldScrollToFirst;\n  const nextSlideIndex = shouldScrollToFirst ? 0 : currentSlideIndex + 1;\n\n  const scrollToPrevious = useCallback(() => {\n    scrollToSlide(previousSlideIndex);\n  }, [previousSlideIndex, scrollToSlide]);\n\n  const scrollToNext = useCallback(() => {\n    scrollToSlide(nextSlideIndex);\n  }, [nextSlideIndex, scrollToSlide]);\n\n  useEffect(() => {\n    if (!autoplay) {\n      return;\n    }\n\n    if (isHover) {\n      return;\n    }\n\n    if (!canScrollToNext) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      scrollToNext();\n    }, autoplay);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [autoplay, canScrollToNext, isHover, scrollToNext]);\n\n  useEffect(() => {\n    if (!perView) {\n      return;\n    }\n    if (perView < 1) {\n      throw new Error('perView must be 1 or more.');\n    }\n    if (!sliderWidth) {\n      return;\n    }\n\n    const gapTotal = perView > 1 ? (perView - 1) * (gap ?? 0) : 0;\n    const perWidth = (sliderWidth - gapTotal) / perView;\n\n    setSliderOption({\n      slideWidth: perWidth,\n      sliderPaddingRight: bound ? 0 : (perView - 1) * sliderWidth,\n      gapWidth: perView > 1 ? gap : 0,\n    });\n  }, [bound, gap, perView, sliderWidth]);\n\n  useEffect(() => {\n    if (!startAt) {\n      return;\n    }\n    scrollToSlide(startAt);\n  }, [scrollToSlide, startAt]);\n\n  return (\n    <Root\n      className={className}\n      onMouseEnter={() => {\n        setIsHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsHover(false);\n      }}\n    >\n      <Slider ref={sliderRef} gapWidth={gapWidth} peek={peek}>\n        {slides.map(({ slideId, child }) => (\n          <Slide key={slideId} id={slideId} width={slideWidth ?? undefined}>\n            {child}\n            <Snapper multipleSlide={!!perView && perView > 1} />\n          </Slide>\n        ))}\n        <SliderPadding inserted={sliderPaddingRight} />\n      </Slider>\n      {!disabledSideNavigation.previous && canScrollToPrevious && (\n        <PreviewButton onClick={scrollToPrevious}>\n          Go to previous slide\n        </PreviewButton>\n      )}\n      {!disabledSideNavigation.next && canScrollToNext && (\n        <NextButton onClick={scrollToNext}>Go to next slide</NextButton>\n      )}\n      {!disabledIndicator && (\n        <Indicator>\n          <IndicatorList>\n            {slides.map(({ slideId }, i) => (\n              <IndicatorItem key={slideId}>\n                <IndicatorButton\n                  isActive={currentSlideIndex === i}\n                  onClick={() => {\n                    scrollToSlide(i);\n                  }}\n                >\n                  Go to {i + 1} slide\n                </IndicatorButton>\n              </IndicatorItem>\n            ))}\n          </IndicatorList>\n        </Indicator>\n      )}\n    </Root>\n  );\n}\n\nconst SliderPadding = styled.div<{ inserted: number }>`\n  padding-left: ${({ inserted }) => inserted}px;\n`;\n\nconst Snapper = styled.div<{ multipleSlide?: boolean }>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  scroll-snap-align: ${({ multipleSlide }) =>\n    multipleSlide ? 'start' : 'center'};\n`;\n\nconst Slide = styled.li<{ width?: number }>`\n  position: relative;\n  flex: 0 0 auto;\n  width: ${({ width }) => (width ? `${width}px` : '100%')};\n`;\n\nconst Root = styled.div`\n  position: relative;\n  height: 100%;\n`;\n\ntype SliderProps = { peek: PeekObject; gapWidth: number };\n\nconst Slider = styled.ol<SliderProps>`\n  height: 100%;\n  display: flex;\n  overflow-x: scroll;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n\n  & > ${Slide} + ${Slide} {\n    margin-left: ${({ gapWidth }) => gapWidth ?? 0}px;\n  }\n\n  scroll-padding: ${({ peek: { before, after } }) =>\n    !before && !after ? '0' : `0 ${after}px 0 ${before}px`};\n  padding: ${({ peek: { before, after } }) =>\n    !before && !after ? '0' : `0 ${after}px 0 ${before}px`};\n`;\n\nconst Indicator = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n  transform: translateY(-24px);\n`;\nconst IndicatorList = styled.ol`\n  display: inline-block;\n`;\nconst IndicatorItem = styled.li`\n  display: inline-block;\n`;\nconst IndicatorButton = styled.button<{ isActive?: boolean }>`\n  display: inline-block;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  background-color: ${({ isActive }) => (isActive ? '#ffe' : '#333')};\n  border-radius: 50%;\n  border: none;\n  margin: 0 4px;\n  font-size: 0;\n  transition: transform 0.1s;\n`;\n\nconst PreviewButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%);\n  position: absolute;\n  top: 50%;\n  left: 8px;\n`;\nconst NextButton = styled(CircleTriangleButton)`\n  transform: translateY(-50%) rotate(180deg);\n  position: absolute;\n  top: 50%;\n  right: 8px;\n`;\n"],"names":["useContentWidth","ref","width","setWidth","useState","perviousWidth","useRef","updatedWidth","useCallback","useEffect","callback","__name","entries","entry","element","observer","persePeek","peek","_a","_b","perseSideNavigationOption","option","createSlideId","carouselKey","index","slideId2SlideIndex","slideId","isEqualSlideIndexes","a","b","v","useCurrentSlideIndex","total","displayedIndexes","setDisplayedIndexes","prevDisplayedIndexes","currentSlideIndex","updated","current","elements","Carousel","className","autoplay","perView","peekOption","startAt","bound","disabledIndicator","disabledSideNavigationOption","useMemo","disabledSideNavigation","sliderRef","sliderWidth","slideWidth","sliderPaddingRight","gapWidth","isHover","setIsHover","scrollToSlide","sliderElement","id","targetElement","scrollX","sliderPosition","targetPosition","slides","React","children","child","i","isDisplayedLastSlide","length","isCurrentSlideFirst","canScrollToPrevious","rewind","previousSlideIndex","shouldScrollToFirst","canScrollToNext","nextSlideIndex","scrollToPrevious","scrollToNext","timer","clearInterval","gapTotal","gap","perWidth","setSliderOption","_jsxs","Root","Slider","undefined","_jsx","SliderPadding","PreviewButton","NextButton","Indicator","IndicatorList","IndicatorButton","styled","div","inserted","Snapper","multipleSlide","Slide","li","ol","before","after","IndicatorItem","button","isActive","CircleTriangleButton"],"mappings":"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"}