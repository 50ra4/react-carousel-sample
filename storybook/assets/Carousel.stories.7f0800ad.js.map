{"version":3,"file":"Carousel.stories.7f0800ad.js","sources":["../../../src/presentation/components/Carousel/Carousel.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n  useMemo,\n} from 'react';\nimport styled from 'styled-components';\n\nexport type CarouselOptions = {\n  /** autoplay milliseconds. default: no autoplay */\n  autoplay?: number;\n};\n\nexport type CarouselProps = {\n  className?: string;\n  carouselKey: string;\n  options?: CarouselOptions;\n  children: React.ReactNode;\n};\n\nconst createSlideId = (carouselKey: string, index: number) =>\n  `${carouselKey}_${index}`;\n\nconst getNextSlideIndex = (length: number, currentIndex: number) =>\n  currentIndex === length - 1 ? 0 : currentIndex + 1;\n\nconst getPrevSlideIndex = (length: number, currentIndex: number) =>\n  currentIndex === 0 ? length - 1 : currentIndex - 1;\n\nexport function Carousel({\n  className,\n  carouselKey,\n  options: { autoplay } = {},\n  children,\n}: CarouselProps) {\n  const rootRef = useRef<HTMLDivElement | null>(null);\n\n  const scrollToSlide = useCallback((id: string) => {\n    const target: HTMLElement | undefined =\n      rootRef.current?.querySelector(`#${id}`) ?? undefined;\n    if (!target) {\n      return;\n    }\n    target.scrollIntoView();\n  }, []);\n\n  const slides = useMemo(\n    () =>\n      React.Children.toArray(children).map((child, i) => ({\n        child,\n        slideId: createSlideId(carouselKey, i),\n      })),\n    [carouselKey, children],\n  );\n\n  const [currentSlideId, setCurrentSlideId] = useState(slides[0].slideId);\n\n  useEffect(() => {\n    if (!rootRef.current) {\n      return;\n    }\n\n    const callback: IntersectionObserverCallback = (entries) => {\n      entries.forEach((entry) => {\n        if (!entry.isIntersecting) {\n          return;\n        }\n        setCurrentSlideId(entry.target.id);\n      });\n    };\n\n    const observer = new IntersectionObserver(callback, {\n      root: rootRef.current,\n      threshold: 1,\n    });\n\n    const elements = slides\n      .map(({ slideId }) => document.querySelector(`#${slideId}`))\n      .filter((v): v is NonNullable<typeof v> => !!v);\n\n    elements.forEach((elm) => {\n      observer.observe(elm);\n    });\n\n    return () => {\n      elements.forEach((elm) => {\n        observer.unobserve(elm);\n      });\n    };\n  }, [carouselKey, slides]);\n\n  const [isHover, setIsHover] = useState(false);\n\n  useEffect(() => {\n    if (!autoplay) {\n      return;\n    }\n\n    if (isHover) {\n      return;\n    }\n\n    const currentSlideIndex = slides.findIndex(\n      (slide) => slide.slideId === currentSlideId,\n    );\n    if (currentSlideIndex < 0) {\n      return;\n    }\n\n    const timer = setInterval(() => {\n      const nextSlideId = createSlideId(\n        carouselKey,\n        getNextSlideIndex(slides.length, currentSlideIndex),\n      );\n\n      scrollToSlide(nextSlideId);\n    }, autoplay);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [autoplay, carouselKey, currentSlideId, isHover, scrollToSlide, slides]);\n\n  return (\n    <Root\n      ref={rootRef}\n      className={className}\n      onMouseEnter={() => {\n        setIsHover(true);\n      }}\n      onMouseLeave={() => {\n        setIsHover(false);\n      }}\n    >\n      <Slider>\n        {slides.map(({ slideId, child }, i) => (\n          <Slide key={slideId} id={slideId}>\n            {child}\n            <Snapper />\n            <NavigationPreview\n              onClick={() => {\n                const targetId = createSlideId(\n                  carouselKey,\n                  getPrevSlideIndex(slides.length, i),\n                );\n                scrollToSlide(targetId);\n              }}\n            >\n              Go to previous slide\n            </NavigationPreview>\n            <NavigationNext\n              onClick={() => {\n                const targetId = createSlideId(\n                  carouselKey,\n                  getNextSlideIndex(slides.length, i),\n                );\n                scrollToSlide(targetId);\n              }}\n            >\n              Go to next slide\n            </NavigationNext>\n          </Slide>\n        ))}\n      </Slider>\n      <Navigation>\n        <NavigationList className={className}>\n          {slides.map(({ slideId }, i) => (\n            <NavigationItem key={slideId}>\n              <NavigationButton\n                isActive={currentSlideId === slideId}\n                onClick={() => {\n                  scrollToSlide(slideId);\n                }}\n              >\n                Go to {i + 1} slide\n              </NavigationButton>\n            </NavigationItem>\n          ))}\n        </NavigationList>\n      </Navigation>\n    </Root>\n  );\n}\n\nconst Snapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  scroll-snap-align: center;\n`;\n\nconst Slide = styled.li`\n  position: relative;\n  flex: 0 0 100%;\n  width: 100%;\n`;\n\nconst Root = styled.div`\n  position: relative;\n  padding-top: 75%;\n  filter: drop-shadow(0 0 10px #0003);\n  perspective: 100px;\n`;\n\nconst Slider = styled.ol`\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  display: flex;\n  overflow-x: scroll;\n  counter-reset: item;\n  scroll-behavior: smooth;\n  scroll-snap-type: x mandatory;\n`;\n\nconst Navigation = styled.aside`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n`;\nconst NavigationList = styled.ol`\n  display: inline-block;\n`;\nconst NavigationItem = styled.li`\n  display: inline-block;\n`;\nconst NavigationButton = styled.button<{ isActive?: boolean }>`\n  display: inline-block;\n  cursor: pointer;\n  width: 16px;\n  height: 16px;\n  background-color: ${({ isActive }) => (isActive ? '#ffe' : '#333')};\n  border-radius: 50%;\n  border: none;\n  margin: 0 4px 24px;\n  font-size: 0;\n  transition: transform 0.1s;\n`;\n\nconst ArrowButton = ({\n  className,\n  onClick,\n  children,\n}: {\n  className?: string;\n  onClick: () => void;\n  children?: React.ReactNode;\n}) => {\n  return (\n    <ArrowCircle className={className} onClick={onClick}>\n      <ArrowTriangle />\n      {children}\n    </ArrowCircle>\n  );\n};\n\nconst ArrowCircle = styled.button`\n  cursor: pointer;\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  font-size: 0;\n  outline: 0;\n  border: none;\n  background-color: #333;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst ArrowTriangle = styled.div`\n  margin-right: 7.5px;\n  width: 0;\n  height: 0;\n  border-style: solid;\n  border-width: 10px 12.5px 10px 0;\n  border-color: transparent #ffe transparent transparent;\n`;\n\nconst NavigationPreview = styled(ArrowButton)`\n  margin-top: 37.5%;\n  transform: translateY(-50%);\n  position: absolute;\n  top: 0;\n  left: 8px;\n`;\n\nconst NavigationNext = styled(ArrowButton)`\n  margin-top: 37.5%;\n  transform: translateY(-50%) rotate(180deg);\n  position: absolute;\n  top: 0;\n  right: 8px;\n`;\n"],"names":["createSlideId","__name","carouselKey","index","getNextSlideIndex","length","currentIndex","getPrevSlideIndex","Carousel","className","autoplay","children","rootRef","useRef","scrollToSlide","useCallback","id","target","_b","_a","slides","useMemo","React","child","i","currentSlideId","setCurrentSlideId","useState","useEffect","callback","entries","entry","observer","current","elements","slideId","isHover","setIsHover","currentSlideIndex","slide","timer","nextSlideId","clearInterval","_jsxs","Root","_jsx","Slider","targetId","NavigationNext","Navigation","NavigationList","NavigationButton","Snapper","styled","Slide","NavigationItem","button","isActive","ArrowButton","onClick","ArrowCircle","ArrowTriangle","NavigationPreview"],"mappings":"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"}